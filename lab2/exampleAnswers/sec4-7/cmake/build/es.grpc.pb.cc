// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: es.proto

#include "es.pb.h"
#include "es.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace es {

static const char* EventService_method_names[] = {
  "/es.EventService/Subscribe",
  "/es.EventService/Publish",
};

std::unique_ptr< EventService::Stub> EventService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EventService::Stub> stub(new EventService::Stub(channel));
  return stub;
}

EventService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Subscribe_(EventService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Publish_(EventService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::es::TopicData>* EventService::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::es::TopicRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::es::TopicData>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void EventService::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, ::es::TopicRequest* request, ::grpc::experimental::ClientReadReactor< ::es::TopicData>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::es::TopicData>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::es::TopicData>* EventService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::es::TopicRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::es::TopicData>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::es::TopicData>* EventService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::es::TopicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::es::TopicData>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::es::TopicData>* EventService::Stub::PublishRaw(::grpc::ClientContext* context, ::es::NoUse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::es::TopicData>::Create(channel_.get(), rpcmethod_Publish_, context, response);
}

void EventService::Stub::experimental_async::Publish(::grpc::ClientContext* context, ::es::NoUse* response, ::grpc::experimental::ClientWriteReactor< ::es::TopicData>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::es::TopicData>::Create(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::es::TopicData>* EventService::Stub::AsyncPublishRaw(::grpc::ClientContext* context, ::es::NoUse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::es::TopicData>::Create(channel_.get(), cq, rpcmethod_Publish_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::es::TopicData>* EventService::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, ::es::NoUse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::es::TopicData>::Create(channel_.get(), cq, rpcmethod_Publish_, context, response, false, nullptr);
}

EventService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EventService::Service, ::es::TopicRequest, ::es::TopicData>(
          std::mem_fn(&EventService::Service::Subscribe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< EventService::Service, ::es::TopicData, ::es::NoUse>(
          std::mem_fn(&EventService::Service::Publish), this)));
}

EventService::Service::~Service() {
}

::grpc::Status EventService::Service::Subscribe(::grpc::ServerContext* context, const ::es::TopicRequest* request, ::grpc::ServerWriter< ::es::TopicData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::Publish(::grpc::ServerContext* context, ::grpc::ServerReader< ::es::TopicData>* reader, ::es::NoUse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace es

